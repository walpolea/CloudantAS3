package  {		import flash.display.MovieClip;	import com.andrewwalpole.cloudantas3.CloudantAS3;	import com.andrewwalpole.cloudantas3.CloudantDoc;	import com.andrewwalpole.cloudantas3.CloudantEvent;	import flash.events.MouseEvent;	import flash.events.IOErrorEvent;			public class CloudantTest extends MovieClip {						public var cdb:CloudantAS3;		public var cd:CloudantDoc;				public function CloudantTest() {						//////////////////////////////////////////			//Inititalize the DB object: provide your base cloudant url, dbname, and API credentials (generate these on the Cloudant Dashboard)			//the DB I'm using for this demo is open...if too many hits get put on it I may close it down: https://walpolea.cloudant.com/as3demo/			//please go ahead and change the info to your own stuff so you can use your own dashboard to peek into the database			//////////////////////////////////////////			cdb = new CloudantAS3("https://walpolea.cloudant.com", "as3demo", "vindilluededishoughtlent", "3AAjCiWKkV6UeeHIjem0Eb3T");						//demos			//writeDocument(); //basic creating a document and writing it to your DB			//readDocument(); //basic reading a document by ID			searchForDocuments(); //shows you a few ways to query on the Primary Index						//shows you how to do a bulk write, which returns a different response than a single write			//writeMany();						//this shows that when you click the stage it stores the x,y data in a document			//each time you subsequently click it will update that document in the database			initClickDemo();					}				public function writeMany():void {						var docs:Vector.<CloudantDoc> = new Vector.<CloudantDoc>();						for( var i:int = 0; i < 4; i++ ) {				docs.push( new CloudantDoc( { name:"thing"+i } ) );			}						cdb.writeBulk( docs );					}				private function initClickDemo():void {			cdb.addEventListener( CloudantEvent.WRITE_COMPLETE, onWriteComplete );			cdb.addEventListener( IOErrorEvent.IO_ERROR, onIOError );						cd = new CloudantDoc();			cdb.write(cd);						stage.addEventListener(MouseEvent.CLICK, onStageClicked );		}				private function onStageClicked( e:MouseEvent ):void {						cd._data.x = stage.mouseX; //update the data			cd._data.y = stage.mouseY;			cdb.update( cd );					}				public function writeDocument():void {						cdb.addEventListener( CloudantEvent.WRITE_COMPLETE, onWriteComplete );			cdb.addEventListener( IOErrorEvent.IO_ERROR, onIOError );						//create some data to save in the document			var o:Object = {};			o.somedata = "Hello World";			o.someArray = [ "uno", "dos", 3, 4, 5 ];			o.x = 0;			o.y = 0;						//turn the data into a document, provide an Id if you like, otherwise Coudant will give it one when you save it.			cd = new CloudantDoc( o, "HelloWorldDoc" );			//Note: if you do this more than once you will get a conflict error because you can't have a document with a duplicate ID						//write the document to your database			cdb.write( cd );					}				public function onWriteComplete( e:CloudantEvent ):void {			//Now update the document reference so you get the new _rev...						trace( "Write Response: ", e.raw );						for( var key in e.response ) {				trace( key, e.response[key] );			}						if( e.response.length ) { //so far this is how you need to check if there are multiple docs in the response...				trace( "received multiple docs" );							} else { //single doc came back, response is an object							//if you write a document and then want to update it later, you need to update the ID (if randomly generated) and definitely the rev:				cd._id = e.response.id;				cd._rev = e.response.rev;			}		}				public function updateDocument( doc:CloudantDoc ):void {									doc._data.somedata = "Hello New World"; //update the data			cdb.update( doc );					}						public function readDocument():void {						cdb.addEventListener( CloudantEvent.READ_COMPLETE, onReadComplete );			cdb.addEventListener( CloudantEvent.READ_ERROR, onIOError );						cdb.read( "NewDocument" );		}				public function onReadComplete( e:CloudantEvent ):void {			trace( "READ COMPLETE" );			trace( e.raw );					}				public function onIOError( e:IOErrorEvent ):void {			trace( "Error: ", e.toString() );		}						public function searchForDocuments():void {						cdb.addEventListener( CloudantEvent.QUERY_COMPLETE, onQueryComplete );						cdb.queryPrimaryIndex({keys:["HelloWorldDoc", "f5f835a50dd413ba6c452d1d0e9349ed"]}, true); //query multiple documents by multiple ids, include data			cdb.queryPrimaryIndex({limit:2, skip:10}, true); //query all documents, but limit results to 2 and skip the first 10 documents			cdb.queryPrimaryIndex({key:"HelloWorldDoc"}, false); //query by single id, don't include document data		}				public function onQueryComplete( e:CloudantEvent ):void {			trace( "QUERY COMPLETE" );			trace( e.raw );		}					}	}